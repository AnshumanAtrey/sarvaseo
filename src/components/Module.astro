---
import Step from "./Step.astro";
import type { Module as ModuleType } from "../data/seoModules";

export interface Props {
  module: ModuleType;
}

const { module } = Astro.props;
---

<div class="group">
  <div
    class={`w-full py-6 cursor-pointer ${module.isPaid ? "opacity-75" : ""}`}
    data-module-toggle={module.id}
    role="button"
    tabindex="0"
    aria-expanded="false"
  >
    <div class="flex items-start justify-between">
      <div class="flex-1">
        <div class="flex items-center mb-2">
          <span
            class={`w-6 h-6 text-xs rounded-full mr-3 flex items-center justify-center ${module.isPaid ? "bg-yellow-400 text-gray-900" : "bg-gray-900 text-white"}`}
          >
            {module.isPaid ? "â˜…" : module.id}
          </span>
          <h2
            class={`font-instrument-serif text-lg font-normal ${module.isPaid ? "text-gray-600" : "text-gray-900"}`}
          >
            {module.title}
            {
              module.isPaid && (
                <span class="ml-2 text-xs text-yellow-600">Premium</span>
              )
            }
          </h2>
        </div>
        <p
          class={`text-xs ml-9 ${module.isPaid ? "text-gray-400" : "text-gray-600"}`}
        >
          {module.description}
        </p>
      </div>
      <svg
        class="w-4 h-4 text-gray-400"
        data-chevron={module.id}
        fill="none"
        stroke="currentColor"
        viewBox="0 0 24 24"
      >
        <path
          stroke-linecap="round"
          stroke-linejoin="round"
          stroke-width="1.5"
          d="M19 9l-7 7-7-7"></path>
      </svg>
    </div>
  </div>

  <div class="hidden" data-module-content={module.id}>
    <div class="ml-9 mt-4 pb-8 space-y-3">
      {module.steps.map((step) => <Step step={step} moduleId={module.id} />)}
    </div>
  </div>
</div>

<script>
  // Ultra-minimal accordion
  addEventListener("DOMContentLoaded", () => {
    document.querySelectorAll("[data-module-toggle]").forEach((toggle) => {
      const htmlToggle = toggle as HTMLElement;
      htmlToggle.onclick = () => {
        const id = htmlToggle.dataset.moduleToggle;
        const content = document.querySelector(
          `[data-module-content="${id}"]`,
        ) as HTMLElement;
        const chevron = document.querySelector(
          `[data-chevron="${id}"]`,
        ) as HTMLElement;
        const expanded = htmlToggle.getAttribute("aria-expanded") === "true";

        if (content && chevron) {
          content.classList.toggle("hidden", expanded);
          chevron.style.transform = expanded ? "" : "rotate(180deg)";
          htmlToggle.setAttribute("aria-expanded", (!expanded).toString());
        }
      };
    });
  });
</script>

<style>
  /* Smooth transitions */
  .module-content {
    transition: all 0.2s ease-out;
  }

  /* Subtle hover effects */
  .group:hover .module-content:not(.hidden) {
    opacity: 0.95;
  }

  /* Custom focus styles - remove default outline */
  [role="button"]:focus {
    outline: none !important;
    box-shadow: none !important;
  }

  /* Optional: Add subtle focus indicator */
  [role="button"]:focus-visible {
    background-color: rgba(254, 240, 138, 0.1);
    border-radius: 8px;
  }
</style>
