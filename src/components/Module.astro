---
import type { Module as ModuleType } from "../data/seoModules";

export interface Props {
  module: ModuleType;
}

const { module } = Astro.props;
---

<div class="group hover:opacity-95 transition-opacity duration-200">
  <div
    class={`w-full py-6 cursor-pointer transition-all duration-200 ease-out focus:outline-none focus-visible:bg-yellow-50 focus-visible:rounded-lg ${module.isPaid ? "opacity-75" : ""}`}
    data-module-toggle={module.id}
    role="button"
    tabindex="0"
    aria-expanded="false"
    onclick={`toggleModule('${module.id}')`}
  >
    <div class="flex items-start justify-between">
      <div class="flex-1">
        <div class="flex items-center mb-2">
          <span
            class={`w-6 h-6 text-xs rounded-full mr-3 flex items-center justify-center ${module.isPaid ? "bg-yellow-400 text-gray-900" : "bg-gray-900 text-white"}`}
          >
            {module.isPaid ? "â˜…" : module.id}
          </span>
          <h2
            class={`font-instrument-serif text-xl font-normal ${module.isPaid ? "text-gray-600" : "text-gray-900"}`}
          >
            {module.title}
            {
              module.isPaid && (
                <span class="ml-2 text-xs text-yellow-600">Premium</span>
              )
            }
          </h2>
        </div>
        <p
          class={`text-xs ml-9 ${module.isPaid ? "text-gray-400" : "text-gray-600"}`}
        >
          {module.description}
        </p>
      </div>
      <svg
        class="w-4 h-4 text-gray-400"
        data-chevron={module.id}
        fill="none"
        stroke="currentColor"
        viewBox="0 0 24 24"
      >
        <path
          stroke-linecap="round"
          stroke-linejoin="round"
          stroke-width="1.5"
          d="M19 9l-7 7-7-7"></path>
      </svg>
    </div>
  </div>

  <div class="hidden" data-module-content={module.id}>
    <div class="ml-9 mt-4 space-y-3">
      {
        module.steps.map((step) => {
          const stepId = `${module.id}-${step.id}`;
          return (
            <div
              class={`pl-4 ${step.isPaid ? "border-l border-gray-300" : "border-l border-gray-200"}`}
            >
              <div
                class={`w-full py-3 cursor-pointer transition-all duration-150 ease-out focus:outline-none focus-visible:bg-yellow-50 focus-visible:rounded-lg ${step.isPaid ? "opacity-75" : ""}`}
                data-step-toggle={stepId}
                data-step-paid={step.isPaid ? "true" : "false"}
                role="button"
                tabindex="0"
                onclick={`toggleStep('${stepId}', ${step.isPaid || false})`}
              >
                <div class="flex items-start justify-between">
                  <h3
                    class={`text-sm ${step.isPaid ? "text-gray-500" : "text-gray-900"}`}
                  >
                    {step.title}
                    {step.isPaid && (
                      <span class="ml-2 text-xs text-gray-400">(Premium)</span>
                    )}
                  </h3>
                  {step.isPaid ? (
                    <svg
                      class="w-3 h-3 text-gray-400 ml-3"
                      viewBox="0 0 24 24"
                      fill="currentColor"
                    >
                      <path d="M12 1.5a5.25 5.25 0 0 0-5.25 5.25v3a3 3 0 0 0-3 3v6.75a3 3 0 0 0 3 3h10.5a3 3 0 0 0 3-3v-6.75a3 3 0 0 0-3-3v-3c0-2.9-2.35-5.25-5.25-5.25Zm3.75 8.25v-3a3.75 3.75 0 1 0-7.5 0v3h7.5Z" />
                    </svg>
                  ) : (
                    <svg
                      class="w-3 h-3 text-gray-400 ml-3"
                      data-step-chevron={stepId}
                      fill="none"
                      stroke="currentColor"
                      viewBox="0 0 24 24"
                    >
                      <path
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        stroke-width="2"
                        d="M19 9l-7 7-7-7"
                      />
                    </svg>
                  )}
                </div>
              </div>

              <div
                class="hidden pt-3 pb-4 space-y-3"
                data-step-content={stepId}
              >
                <p class="text-xs text-gray-600" set:html={step.action} />
                <div class="bg-yellow-50/50 border-l-2 border-yellow-300 pl-3 py-2">
                  <p class="text-xs text-gray-700">
                    <span class="font-medium text-yellow-700">Tip:</span>
                    <span set:html={step.tip} />
                  </p>
                </div>
                {step.example && (
                  <div class="border-l-2 border-gray-200 pl-3 py-2">
                    <p class="text-xs text-gray-600">
                      <span class="font-medium text-gray-700">Example:</span>{" "}
                      <span set:html={step.example} />
                    </p>
                  </div>
                )}
              </div>
            </div>
          );
        })
      }
    </div>
  </div>
</div>

<script is:inline>
  // Global functions for accordion behavior
  window.toggleModule = function (moduleId) {
    const toggle = document.querySelector(`[data-module-toggle="${moduleId}"]`);
    const content = document.querySelector(
      `[data-module-content="${moduleId}"]`,
    );
    const chevron = document.querySelector(`[data-chevron="${moduleId}"]`);
    const expanded = toggle?.getAttribute("aria-expanded") === "true";

    if (content && chevron && toggle) {
      // Close all other modules first
      document
        .querySelectorAll("[data-module-toggle]")
        .forEach((otherToggle) => {
          const otherId = otherToggle.getAttribute("data-module-toggle");

          if (otherId !== moduleId) {
            const otherContent = document.querySelector(
              `[data-module-content="${otherId}"]`,
            );
            const otherChevron = document.querySelector(
              `[data-chevron="${otherId}"]`,
            );

            if (otherContent && otherChevron) {
              // Close other module and all its steps
              otherContent.classList.add("hidden");
              otherChevron.style.transform = "";
              otherToggle.setAttribute("aria-expanded", "false");

              // Close all steps in the other module
              otherContent
                .querySelectorAll("[data-step-content]")
                .forEach((stepContent) => {
                  stepContent.classList.add("hidden");
                });
              otherContent
                .querySelectorAll("[data-step-chevron]")
                .forEach((stepChevron) => {
                  stepChevron.style.transform = "";
                });
            }
          }
        });

      // Toggle current module
      content.classList.toggle("hidden", expanded);
      chevron.style.transform = expanded ? "" : "rotate(180deg)";
      toggle.setAttribute("aria-expanded", (!expanded).toString());
    }
  };

  window.toggleStep = function (stepId, isPaid) {
    if (isPaid) {
      alert(
        "This is premium content. Please upgrade to access detailed instructions.",
      );
      return;
    }

    const moduleId = stepId.split("-")[0];
    const content = document.querySelector(`[data-step-content="${stepId}"]`);
    const chevron = document.querySelector(`[data-step-chevron="${stepId}"]`);

    if (content && chevron && moduleId) {
      const isCurrentlyHidden = content.classList.contains("hidden");

      // Close all other steps in the same module
      document
        .querySelectorAll(`[data-step-toggle^="${moduleId}-"]`)
        .forEach((otherToggle) => {
          const otherStepId = otherToggle.getAttribute("data-step-toggle");

          if (otherStepId !== stepId) {
            const otherContent = document.querySelector(
              `[data-step-content="${otherStepId}"]`,
            );
            const otherChevron = document.querySelector(
              `[data-step-chevron="${otherStepId}"]`,
            );

            if (otherContent && otherChevron) {
              otherContent.classList.add("hidden");
              otherChevron.style.transform = "";
            }
          }
        });

      // Toggle current step
      if (isCurrentlyHidden) {
        content.classList.remove("hidden");
        chevron.style.transform = "rotate(180deg)";
      } else {
        content.classList.add("hidden");
        chevron.style.transform = "";
      }
    }
  };
</script>


