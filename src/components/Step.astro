---
import type { Step as StepType } from "../data/seoModules";

export interface Props {
  step: StepType;
  moduleId: number;
}

const { step, moduleId } = Astro.props;
const stepId = `${moduleId}-${step.id}`;
---

<div class={`group pl-4 transition-colors duration-200 ${step.isPaid ? 'border-l border-gray-300' : 'border-l border-gray-200 hover:border-yellow-400'}`}>
  <!-- Step Header -->
  <div
    class={`w-full py-3 cursor-pointer transition-all duration-200 outline-none focus:outline-none ${step.isPaid ? 'opacity-75' : ''}`}
    data-step-toggle={stepId}
    data-step-paid={step.isPaid ? 'true' : 'false'}
    role="button"
    tabindex="0"
    aria-expanded="false"
    aria-controls={`step-content-${stepId}`}
    aria-describedby={`step-action-${stepId}`}
  >
    <div class="flex items-start justify-between">
      <div class="flex-1">
        <!-- Step Title -->
        <h3 class={`font-geist font-medium text-sm ${step.isPaid ? 'text-gray-500' : 'text-gray-900 group-hover:text-gray-700'}`}>
          {step.title}
          {step.isPaid && <span class="ml-2 text-xs font-normal text-gray-400">(Premium)</span>}
        </h3>
      </div>

      <!-- Expand/Collapse Icon or Lock Icon -->
      <div class="ml-3 flex-shrink-0 mt-0.5">
        {step.isPaid ? (
          <svg
            class="w-3 h-3 text-gray-400"
            xmlns="http://www.w3.org/2000/svg"
            viewBox="0 0 24 24"
            fill="currentColor"
          >
            <path
              fill-rule="evenodd"
              d="M12 1.5a5.25 5.25 0 0 0-5.25 5.25v3a3 3 0 0 0-3 3v6.75a3 3 0 0 0 3 3h10.5a3 3 0 0 0 3-3v-6.75a3 3 0 0 0-3-3v-3c0-2.9-2.35-5.25-5.25-5.25Zm3.75 8.25v-3a3.75 3.75 0 1 0-7.5 0v3h7.5Z"
              clip-rule="evenodd"
            />
          </svg>
        ) : (
          <svg
            class="w-3 h-3 text-gray-400 transform transition-transform duration-200 group-hover:text-gray-600"
            data-step-chevron={stepId}
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M19 9l-7 7-7-7"
            />
          </svg>
        )}
      </div>
    </div>
  </div>

  <!-- Step Content -->
  <div
    id={`step-content-${stepId}`}
    class="step-content hidden"
    data-step-content={stepId}
  >
    <div class="pt-3 pb-4 space-y-3">
      <!-- Action Description -->
      <div>
        <p class="font-geist text-xs text-gray-600 leading-relaxed" set:html={step.action}>
        </p>
      </div>

      <!-- Helpful Tip -->
      <div class="bg-yellow-50/50 border-l-2 border-yellow-300 pl-3 py-2">
        <p class="font-geist text-xs text-gray-700 leading-relaxed">
          <span class="font-medium text-yellow-700">Tip:</span> <span set:html={step.tip}></span>
        </p>
      </div>

      <!-- Example (if provided) -->
      {
        step.example && (
          <div class="border-l-2 border-gray-200 pl-3 py-2">
            <p class="font-geist text-xs text-gray-600 leading-relaxed">
              <span class="font-medium text-gray-700">Example:</span> <span set:html={step.example}></span>
            </p>
          </div>
        )
      }
    </div>
  </div>
</div>

<script>
  // Step accordion and completion functionality
  document.addEventListener("DOMContentLoaded", () => {
    // Step toggle functionality
    const stepToggles = document.querySelectorAll("[data-step-toggle]");

    stepToggles.forEach((toggle) => {
      const handleToggle = () => {
        const stepId = toggle.getAttribute("data-step-toggle");
        const isPaid = toggle.getAttribute("data-step-paid") === "true";
        
        // If it's paid content, show upgrade message and don't expand
        if (isPaid) {
          alert("This is premium content. Please upgrade to access detailed step-by-step instructions and examples.");
          return;
        }

        const content = document.querySelector(
          `[data-step-content="${stepId}"]`,
        );
        const chevron = document.querySelector(
          `[data-step-chevron="${stepId}"]`,
        );
        const isExpanded = toggle.getAttribute("aria-expanded") === "true";

        if (content && chevron) {
          if (isExpanded) {
            // Collapse
            content.classList.add("hidden");
            chevron.classList.remove("rotate-180");
            toggle.setAttribute("aria-expanded", "false");
          } else {
            // Expand
            content.classList.remove("hidden");
            chevron.classList.add("rotate-180");
            toggle.setAttribute("aria-expanded", "true");
          }
        }
      };

      toggle.addEventListener("click", handleToggle);

      // Keyboard navigation
      toggle.addEventListener("keydown", (e) => {
        const keyEvent = e as KeyboardEvent;
        if (keyEvent.key === "Enter" || keyEvent.key === " ") {
          keyEvent.preventDefault();
          handleToggle();
        }
      });
    });
  });
</script>

<style>
  /* Smooth transitions for step content */
  .step-content {
    transition: all 0.15s ease-out;
  }

  /* Custom focus styles - remove default outline */
  [role="button"]:focus {
    outline: none !important;
    box-shadow: none !important;
  }

  /* Optional: Add subtle focus indicator */
  [role="button"]:focus-visible {
    background-color: rgba(254, 240, 138, 0.05);
    border-radius: 6px;
  }
</style>
