---
import type { Step as StepType } from "../data/seoModules";

export interface Props {
  step: StepType;
  moduleId: number;
}

const { step, moduleId } = Astro.props;
const stepId = `${moduleId}-${step.id}`;
---

<div
  class={`pl-4 ${step.isPaid ? "border-l border-gray-300" : "border-l border-gray-200"}`}
>
  <div
    class={`w-full py-3 cursor-pointer ${step.isPaid ? "opacity-75" : ""}`}
    data-step-toggle={stepId}
    data-step-paid={step.isPaid ? "true" : "false"}
    role="button"
    tabindex="0"
  >
    <div class="flex items-start justify-between">
      <h3 class={`text-sm ${step.isPaid ? "text-gray-500" : "text-gray-900"}`}>
        {step.title}
        {
          step.isPaid && (
            <span class="ml-2 text-xs text-gray-400">(Premium)</span>
          )
        }
      </h3>
      {
        step.isPaid ? (
          <svg
            class="w-3 h-3 text-gray-400 ml-3"
            viewBox="0 0 24 24"
            fill="currentColor"
          >
            <path d="M12 1.5a5.25 5.25 0 0 0-5.25 5.25v3a3 3 0 0 0-3 3v6.75a3 3 0 0 0 3 3h10.5a3 3 0 0 0 3-3v-6.75a3 3 0 0 0-3-3v-3c0-2.9-2.35-5.25-5.25-5.25Zm3.75 8.25v-3a3.75 3.75 0 1 0-7.5 0v3h7.5Z" />
          </svg>
        ) : (
          <svg
            class="w-3 h-3 text-gray-400 ml-3"
            data-step-chevron={stepId}
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M19 9l-7 7-7-7"
            />
          </svg>
        )
      }
    </div>
  </div>

  <div class="hidden pt-3 pb-4 space-y-3" data-step-content={stepId}>
    <p class="text-xs text-gray-600" set:html={step.action} />
    <div class="bg-yellow-50/50 border-l-2 border-yellow-300 pl-3 py-2">
      <p class="text-xs text-gray-700">
        <span class="font-medium text-yellow-700">Tip:</span>
        <span set:html={step.tip} />
      </p>
    </div>
    {
      step.example && (
        <div class="border-l-2 border-gray-200 pl-3 py-2">
          <p class="text-xs text-gray-600">
            <span class="font-medium text-gray-700">Example:</span>{" "}
            <span set:html={step.example} />
          </p>
        </div>
      )
    }
  </div>
</div>

<script>
  // Minimal step accordion
  addEventListener("DOMContentLoaded", () => {
    document.querySelectorAll("[data-step-toggle]").forEach((toggle) => {
      const htmlToggle = toggle as HTMLElement;
      htmlToggle.onclick = () => {
        if (htmlToggle.dataset.stepPaid === "true") {
          alert(
            "This is premium content. Please upgrade to access detailed instructions.",
          );
          return;
        }
        const content = document.querySelector(
          `[data-step-content="${htmlToggle.dataset.stepToggle}"]`,
        ) as HTMLElement;
        const chevron = document.querySelector(
          `[data-step-chevron="${htmlToggle.dataset.stepToggle}"]`,
        ) as HTMLElement;
        if (content && chevron) {
          content.classList.toggle("hidden");
          chevron.style.transform = content.classList.contains("hidden")
            ? ""
            : "rotate(180deg)";
        }
      };
    });
  });
</script>

<style>
  /* Smooth transitions for step content */
  .step-content {
    transition: all 0.15s ease-out;
  }

  /* Custom focus styles - remove default outline */
  [role="button"]:focus {
    outline: none !important;
    box-shadow: none !important;
  }

  /* Optional: Add subtle focus indicator */
  [role="button"]:focus-visible {
    background-color: rgba(254, 240, 138, 0.05);
    border-radius: 6px;
  }
</style>
