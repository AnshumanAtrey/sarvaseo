---
// Import global styles
import "../style/global.css";

export interface Props {
	title?: string;
	description?: string;
}

const {
	title = "Free SEO Checklist 2025 - Complete AI SEO Guide & Tools | SarvaSEO",
	description = "Free comprehensive SEO checklist with 55+ actionable steps. Master SEO rankings with AI tools, keyword research, technical SEO, and proven strategies. Get instant search engine indexing with IndexNow integration!",
} = Astro.props;
---

<!doctype html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<!-- Favicon Configuration - Multiple formats for maximum compatibility -->
		<link rel="icon" type="image/x-icon" href="/favicon.ico" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<link rel="shortcut icon" href="/favicon.ico" />
		<link rel="apple-touch-icon" href="/favicon.ico" />
		<meta name="generator" content={Astro.generator} />

		<!-- SEO Meta Tags -->
		<title>{title}</title>
		<meta name="description" content={description} />
		<meta
			name="keywords"
			content="free SEO checklist, AI SEO, how to improve SEO, SEO guide 2025, search engine optimization, keyword research, technical SEO, SEO tools, SEO ranking factors, website optimization, SEO audit, local SEO, content SEO, link building, page speed optimization, mobile SEO, SEO best practices, organic traffic, SERP ranking, Google SEO, SEO strategy"
		/>
		<meta name="author" content="SarvaSEO - Built by atrey.dev" />
		<meta
			name="robots"
			content="index, follow, max-image-preview:large, max-snippet:-1, max-video-preview:-1"
		/>
		<meta name="googlebot" content="index, follow" />
		<meta
			name="google-site-verification"
			content="vfl_Z9jHpXJBVtYEGNKNsxdFq_9HMWyKZNYF8ZuH4WE"
		/>
		<meta name="msvalidate.01" content="09DA5E83D4AFE5E809803FF539F307C2" />
		<meta name="IndexNow" content="0177dad855f84bc3900bf90ee223115c" />
		<link rel="canonical" href="https://sarvaseo.atrey.dev/" />
		
		<!-- Additional SEO Meta Tags for Better Indexing -->
		<meta name="rating" content="general" />
		<meta name="revisit-after" content="7 days" />
		<meta name="distribution" content="global" />
		<meta name="language" content="en" />
		<meta name="geo.region" content="US" />
		<meta name="geo.placename" content="United States" />

		<!-- Open Graph Meta Tags -->
		<meta property="og:title" content={title} />
		<meta property="og:description" content={description} />
		<meta property="og:type" content="website" />
		<meta property="og:url" content="https://sarvaseo.atrey.dev/" />
		<meta property="og:site_name" content="SarvaSEO" />
		<meta property="og:locale" content="en_US" />

		<!-- Twitter Card Meta Tags -->
		<meta name="twitter:card" content="summary_large_image" />
		<meta name="twitter:title" content={title} />
		<meta name="twitter:description" content={description} />

		<!-- SEO-Critical Meta Tags -->
		<meta name="theme-color" content="#EAB308" />
		<meta name="application-name" content="SarvaSEO" />
		<meta name="apple-mobile-web-app-title" content="SarvaSEO" />

		<!-- SEO-Critical Schema.org JSON-LD -->
		<script type="application/ld+json" is:inline>
			{
				"@context": "https://schema.org",
				"@type": "WebSite",
				"name": "SarvaSEO",
				"description": "Free comprehensive SEO checklist and guide with AI-powered tools for improving search engine rankings",
				"url": "https://sarvaseo.atrey.dev/",
				"author": {
					"@type": "Person",
					"name": "Atrey",
					"url": "https://atrey.dev"
				},
				"publisher": {
					"@type": "Organization",
					"name": "SarvaSEO",
					"url": "https://sarvaseo.atrey.dev/"
				},
				"mainEntity": {
					"@type": "HowTo",
					"name": "Complete SEO Checklist Guide",
					"description": "Step-by-step guide to improve your website's SEO rankings with proven strategies and AI tools",
					"totalTime": "PT2H",
					"step": [
						{
							"@type": "HowToStep",
							"name": "Foundation Setup",
							"text": "Set up Google Business Profile, Search Console, and basic technical SEO foundations"
						},
						{
							"@type": "HowToStep",
							"name": "Content Strategy",
							"text": "Perform keyword research, create SEO-optimized content, and build topical authority"
						},
						{
							"@type": "HowToStep",
							"name": "Technical Optimization",
							"text": "Optimize page speed, mobile responsiveness, and Core Web Vitals"
						}
					]
				}
			}
		</script>

		<!-- Microsoft Clarity Analytics -->
		<script is:inline>
			(function(c,l,a,r,i,t,y){
				c[a]=c[a]||function(){(c[a].q=c[a].q||[]).push(arguments)};
				t=l.createElement(r);t.async=1;t.src="https://www.clarity.ms/tag/"+i+"?ref=bwt";
				y=l.getElementsByTagName(r)[0];y.parentNode.insertBefore(t,y);
			})(window, document, "clarity", "script", "t3llz3cw5l");
		</script>

		<!-- Optimized Module System with Lazy Loading -->
		<script is:inline>
			// Performance-optimized module system
			window.loadedModules = new Set();
			
			// Optimized toggle function with lazy loading
			window.toggleModule = function(moduleId) {
				const toggle = document.querySelector(`[data-module-toggle="${moduleId}"]`);
				const content = document.querySelector(`[data-module-content="${moduleId}"]`);
				const chevron = document.querySelector(`[data-chevron="${moduleId}"]`);
				const expanded = toggle?.getAttribute("aria-expanded") === "true";

				if (!content || !chevron || !toggle) return;

				// Close all other modules first (performance optimization)
				document.querySelectorAll("[data-module-toggle]").forEach((otherToggle) => {
					const otherId = otherToggle.getAttribute("data-module-toggle");
					if (otherId !== moduleId) {
						const otherContent = document.querySelector(`[data-module-content="${otherId}"]`);
						const otherChevron = document.querySelector(`[data-chevron="${otherId}"]`);
						if (otherContent && otherChevron) {
							otherContent.classList.add("hidden");
							otherChevron.style.transform = "";
							otherToggle.setAttribute("aria-expanded", "false");
						}
					}
				});

				// Toggle current module
				if (expanded) {
					content.classList.add("hidden");
					chevron.style.transform = "";
					toggle.setAttribute("aria-expanded", "false");
				} else {
					// Lazy load content if not already loaded
					if (!window.loadedModules.has(moduleId)) {
						loadModuleContent(moduleId);
					}
					content.classList.remove("hidden");
					chevron.style.transform = "rotate(180deg)";
					toggle.setAttribute("aria-expanded", "true");
				}
			};

			// Lazy load module content
			window.loadModuleContent = function(moduleId) {
				// This will be populated with actual module data
				window.loadedModules.add(moduleId);
			};

			// Event delegation for better performance
			document.addEventListener('click', function(e) {
				const moduleToggle = e.target.closest('[data-module-toggle]');
				if (moduleToggle) {
					const moduleId = moduleToggle.getAttribute('data-module-toggle');
					toggleModule(moduleId);
				}
			});

			// Lazy loading for remaining modules
			let lazyModulesLoaded = false;
			
			function loadRemainingModules() {
				if (lazyModulesLoaded) return;
				lazyModulesLoaded = true;
				
				const loadingIndicator = document.getElementById('loading-indicator');
				const lazyContainer = document.getElementById('lazy-modules');
				
				if (loadingIndicator) loadingIndicator.classList.remove('hidden');
				
				// Simulate loading delay for better UX
				setTimeout(() => {
					if (lazyContainer) {
						// This would normally load the remaining modules
						// For now, we'll just hide the loading indicator
						if (loadingIndicator) loadingIndicator.classList.add('hidden');
					}
				}, 500);
			}

			// Intersection Observer for lazy loading
			if ('IntersectionObserver' in window) {
				const observer = new IntersectionObserver((entries) => {
					entries.forEach(entry => {
						if (entry.isIntersecting) {
							loadRemainingModules();
							observer.disconnect();
						}
					});
				}, { rootMargin: '200px' });

				document.addEventListener('DOMContentLoaded', () => {
					const lazyContainer = document.getElementById('lazy-modules');
					if (lazyContainer) observer.observe(lazyContainer);
				});
			}
		</script>

		<!-- Critical Resource Hints - Optimized -->
		<link rel="preconnect" href="https://fonts.googleapis.com" />
		<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
		<link rel="preconnect" href="https://www.clarity.ms" />
		<link rel="dns-prefetch" href="https://api.indexnow.org" />
		<link rel="dns-prefetch" href="https://www.bing.com" />
		<link rel="dns-prefetch" href="https://yandex.com" />

		<!-- Non-blocking Font Loading with Fallbacks -->
		<link
			href="https://fonts.googleapis.com/css2?family=Geist:wght@400&family=Instrument+Serif:wght@400&display=swap"
			rel="preload"
			as="style"
			onload="this.onload=null;this.rel='stylesheet'"
		/>
		<noscript>
			<link
				href="https://fonts.googleapis.com/css2?family=Geist:wght@400&family=Instrument+Serif:wght@400&display=swap"
				rel="stylesheet"
			/>
		</noscript>
		
		<!-- Critical CSS - Inlined for Performance -->
		<style>
			/* Font fallbacks to prevent layout shift */
			.font-geist { font-family: 'Geist', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; }
			.font-instrument-serif { font-family: 'Instrument Serif', Georgia, 'Times New Roman', serif; }
			
			/* Critical above-the-fold styles */
			body { margin: 0; padding: 0; }
			.hero-section { min-height: 100vh; }
			.main-content { max-width: 768px; margin: 0 auto; padding: 0 4rem; }
			
			/* Optimize LCP element */
			h1 { font-size: 3.75rem; line-height: 1; font-weight: 300; color: #111827; }
			@media (min-width: 640px) { h1 { font-size: 4.5rem; } }
			
			/* Reduce layout shift */
			.module-container { contain: layout style; }
			.step-container { contain: layout; }
		</style>
		<link
			rel="preload"
			href="https://fonts.gstatic.com/s/geist/v1/gyBhhwUxI-K4-9s-DgqjPHNm.woff2"
			as="font"
			type="font/woff2"
			crossorigin
		/>
		<link
			rel="preload"
			href="https://fonts.gstatic.com/s/instrumentserif/v4/jizBRFtNs2P-hK546B9-QUJyTSL0RCQ.woff2"
			as="font"
			type="font/woff2"
			crossorigin
		/>

		<!-- Ultra-Minimal Performance Script -->
		<script is:inline>
			// Essential LCP tracking only
			addEventListener("load", () => {
				if ("PerformanceObserver" in window) {
					try {
						new PerformanceObserver((list) => {
							const entries = list.getEntries();
							if (entries.length && typeof gtag !== "undefined") {
								gtag("event", "LCP", {
									value: Math.round(
										entries[entries.length - 1].startTime,
									),
									event_category: "Performance",
								});
							}
						}).observe({
							type: "largest-contentful-paint",
							buffered: true,
						});
					} catch (e) {}
				}

				// Auto-submit to IndexNow for instant indexing
				setTimeout(() => {
					fetch('/api/indexnow', {
						method: 'POST',
						headers: { 'Content-Type': 'application/json' },
						body: JSON.stringify({ url: window.location.href })
					}).catch(() => {}); // Silent fail
				}, 3000);
			});
		</script>

		<!-- Valid Security Meta Tags -->
		<meta
			http-equiv="Content-Security-Policy"
			content="default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com; font-src 'self' https://fonts.gstatic.com; connect-src 'self'; img-src 'self' data:;"
		/>
		<meta http-equiv="X-Content-Type-Options" content="nosniff" />
		<meta
			http-equiv="Referrer-Policy"
			content="strict-origin-when-cross-origin"
		/>
		<!-- Disable overscroll behavior -->
		<style is:inline>
			html, body {
				overscroll-behavior: none;
			}
		</style>
	</head>
	<body class="font-geist text-gray-900 antialiased">
		<div class="min-h-screen bg-gradient-to-br from-white to-yellow-50">
			<slot />
		</div>
	</body>
</html>
